version: '3.5'

services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - backend
  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    networks:
      - backend
    depends_on:
      - "etcd"
      - "minio" 
  attu:
    container_name: attu
    image: zilliz/attu:v2.2.7
    environment:
      MILVUS_URL: milvus-standalone:19530
    ports:
      - "8000:3000"
    networks:
      - backend
    depends_on:
      - "milvus"
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    networks:
      - backend
    restart: unless-stopped
  redis:
    container_name: redis_container
    image: redis
    volumes:
      - redis:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - backend
  ssoserver:
    container_name: sso-server
    build: 
      context: sso-server
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      DATABASE_URL: postgresql://admin:password@postgres:5432
      REDIS_URL: redis
      REDIS_PORT: 6379
      JWT_SECRET_KEY: 'JWTSECRETKEY'
      MODEL_PATH: '/models/v1/'
      MILVUS_DATABASE_URL: 'milvus'
      MILVUS_DATABASE_PORT: 19530
      MODE: 'prod'
    ports:
      - "8080:8080"
    volumes:
      - "./sso-server:/code"
      - "./models/descriminator:/models"
    depends_on:
      - "postgres"
      - "redis"
      - "milvus"
    networks:
      - backend
  ssoweb:
    container_name: sso-web
    build:
      context: sso-web
      dockerfile: Dockerfile
    volumes:
      - "./sso-web:/app"
    ports:
      - "80:80"
    networks:
      - backend
    depends_on:
      - "ssoserver"
  modelserver:
    container_name: model-server
    build:
      context: models/base-models
      dockerfile: Dockerfile
    ports:
      - "8090:80"
    volumes:
      - ./models/jsmodels:/usr/share/nginx/html/models
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./temp/postgres
  redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./temp/redis
